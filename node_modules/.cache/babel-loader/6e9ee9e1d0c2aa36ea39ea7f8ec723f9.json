{"ast":null,"code":"import { getServiceObject, getCenter } from './map';\nimport { doGoogleMapSearchPromise } from '../logics/map';\nimport axios from 'axios';\nimport jsonp from 'axios-jsonp';\nlet searchStatus = 'READY';\nexport const trySearch = (keyword, useGoogle, useHotPepper) => {\n  if (searchStatus !== 'READY') return;\n  searchStatus = 'BUSY';\n  console.log(keyword);\n  return new Promise((resolve, reject) => {\n    let responseHotPepper, responseGoogle, promiseGoogle, promiseHotPepper;\n    let req = {\n      keyword: keyword,\n      radius: 500,\n      userLoc: getCenter()\n    };\n    if (!useGoogle && !useHotPepper) return;\n\n    if (useHotPepper) {\n      promiseHotPepper = axios.get(createHotPepperRequest(req), {\n        adapter: jsonp\n      }).then(response => {\n        responseHotPepper = perseHotPepperResults(response);\n      });\n    }\n\n    if (useGoogle) {\n      promiseGoogle = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then(response => {\n        responseGoogle = perseGoogleResults(response);\n      }).catch(status => {\n        responseGoogle = perseGoogleResults(status);\n      });\n    }\n\n    Promise.all([promiseGoogle, promiseHotPepper]).then(message => {\n      if (!useGoogle) responseGoogle = 'NO_RESULTS';\n      if (!useHotPepper) responseHotPepper = 'NO_RESULTS';\n      let res = combineResults(responseGoogle, responseHotPepper, req.userLoc);\n      resolve(res);\n    });\n  });\n};\nexport function createGoogleRequest(req) {\n  let request = {\n    location: req.userLoc,\n    radius: req.radius,\n    keyword: req.keyword,\n    type: 'restaurant' //only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n  };\n  return request;\n}\nexport function createHotPepperRequest(req) {\n  let apiKeyHotPepper = '1ff50644037f0f38';\n  let lat = req.userLoc.lat();\n  let lng = req.userLoc.lng();\n  let keyword = req.keyword;\n  const apiURL = `https://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n  return apiURL;\n}\nexport function combineResults(res1, res2, loc) {\n  let results, status, reason;\n\n  if (res1 === 'NO_RESULTS' && res2 === 'NO_RESULTS') {\n    status = 'NO_RESULTS';\n    results = [];\n    reason = 'both';\n    ;\n  } else if (res2 === 'NO_RESULTS') {\n    status = 'DONE';\n    results = res1;\n    reason = 'res2';\n    ;\n  } else if (res1 === 'NO_RESULTS') {\n    status = 'DONE';\n    results = res2;\n    reason = 'res1';\n    ;\n  } else {\n    status = 'DONE';\n    reason = 'done';\n    ;\n    results = res1.concat(res2);\n  }\n\n  let res = {\n    status: status,\n    results: results,\n    reason: reason,\n    lat: loc.lat(),\n    lng: loc.lng()\n  };\n  searchStatus = 'WAITING';\n  let timeout = setTimeout(() => {\n    SearchStatus = 'READY';\n  }, 3000);\n  console.log(res);\n  return res;\n}\nexport function perseGoogleResults(results) {\n  let result_temp = {};\n  let parsedResults = [];\n\n  if (results === 'ZERO_RESULTS') {\n    return 'NO_RESULTS';\n  }\n\n  for (let i = 0; i < results.length; i++) {\n    let result = results[i];\n    result_temp = {};\n    result_temp.name = result.name;\n    result_temp.vicinity = result.vicinity;\n    result_temp.rating = result.rating;\n    result_temp.lat = result.geometry.location.lat();\n    result_temp.lng = result.geometry.location.lng();\n    result_temp.type = 1;\n    result_temp.rat = result.user_ratings_total;\n    result_temp.google = 'we_are_still_working_on_it.sry';\n    result_temp.photo = result.photos[0].getUrl();\n    /*axios.get(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${result.place_id}&key=AIzaSyC9qsxaC4dHG0ibEr9NMKC9Ddro_jdnMk8`, {\n        adapter: jsonp\n    }).then((response) => {\n         console.log(response);\n        result_temp.google = response.url;\n     });*/\n    //cors error occurs\n\n    parsedResults.push(result_temp);\n  }\n\n  return parsedResults;\n}\nexport function perseHotPepperResults(res) {\n  let result_temp = {};\n  let parsedResults = [];\n  let results = res.data.results.shop;\n\n  if (res.data.results.shop.length <= 0) {\n    return 'NO_RESULTS';\n  }\n\n  for (let i = 0; i < results.length; i++) {\n    let result = results[i];\n    result_temp = {};\n    result_temp.name = result.name;\n    result_temp.vicinity = result.address;\n    result_temp.rating = 5;\n    result_temp.lat = result.lat;\n    result_temp.lng = result.lng;\n    result_temp.type = 2;\n    result_temp.photo = result.photo.mobile.l;\n    result_temp.hotpepper = `hotpepper.jp/str${result.id}`;\n    parsedResults.push(result_temp);\n  }\n\n  return parsedResults;\n}","map":{"version":3,"names":["getServiceObject","getCenter","doGoogleMapSearchPromise","axios","jsonp","searchStatus","trySearch","keyword","useGoogle","useHotPepper","console","log","Promise","resolve","reject","responseHotPepper","responseGoogle","promiseGoogle","promiseHotPepper","req","radius","userLoc","get","createHotPepperRequest","adapter","then","response","perseHotPepperResults","createGoogleRequest","perseGoogleResults","catch","status","all","message","res","combineResults","request","location","type","apiKeyHotPepper","lat","lng","apiURL","res1","res2","loc","results","reason","concat","timeout","setTimeout","SearchStatus","result_temp","parsedResults","i","length","result","name","vicinity","rating","geometry","rat","user_ratings_total","google","photo","photos","getUrl","push","data","shop","address","mobile","l","hotpepper","id"],"sources":["/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/logics/search.js"],"sourcesContent":["\nimport { getServiceObject, getCenter } from './map';\nimport { doGoogleMapSearchPromise } from '../logics/map';\nimport axios from 'axios'\nimport jsonp from 'axios-jsonp'\n\nlet searchStatus = 'READY';\n\nexport const trySearch = (keyword, useGoogle, useHotPepper) => {\n\n    if (searchStatus !== 'READY')\n        return ;\n\n    searchStatus = 'BUSY';\n    console.log(keyword);\n    return new Promise((resolve, reject) => {\n\n        let responseHotPepper, responseGoogle, promiseGoogle, promiseHotPepper;\n\n        let req = {\n            keyword: keyword,\n            radius: 500,\n            userLoc: getCenter()\n        };\n\n        if (!useGoogle && !useHotPepper)\n            return;\n\n        if (useHotPepper) {\n\n            promiseHotPepper = axios.get(createHotPepperRequest(req), {\n                adapter: jsonp\n            }).then((response) => {\n\n                responseHotPepper = perseHotPepperResults(response);\n\n            });\n        }\n\n        if (useGoogle) {\n\n            promiseGoogle = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then((response) => {\n\n                responseGoogle = perseGoogleResults(response);\n\n            }).catch((status) => {\n\n                responseGoogle = perseGoogleResults(status);\n\n            })\n        }\n\n        Promise.all([promiseGoogle, promiseHotPepper]).then((message) => {\n\n            if (!useGoogle)\n                responseGoogle = 'NO_RESULTS';\n\n            if (!useHotPepper)\n                responseHotPepper = 'NO_RESULTS';\n\n            let res = combineResults(responseGoogle, responseHotPepper, req.userLoc);\n\n            resolve(res);\n\n        })\n    })\n}\n\n    export function createGoogleRequest(req) {\n\n        let request = {\n\n            location: req.userLoc,\n            radius: req.radius,\n            keyword: req.keyword,\n            type: 'restaurant',//only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n        };\n\n        return request;\n    }\n\n    export function createHotPepperRequest(req) {\n\n        let apiKeyHotPepper = '1ff50644037f0f38';\n        let lat = req.userLoc.lat();\n        let lng = req.userLoc.lng();\n        let keyword = req.keyword;\n        const apiURL = `https://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n\n        return apiURL;\n    }\n\n    export function combineResults(res1, res2, loc) {\n\n        let results, status,reason;\n\n        if (res1 === 'NO_RESULTS' && res2 === 'NO_RESULTS') {\n            status = 'NO_RESULTS';\n            results = [];\n            reason = 'both';;\n        } else if (res2 === 'NO_RESULTS') {\n            status = 'DONE';\n            results = res1;\n            reason = 'res2';;\n        } else if (res1 === 'NO_RESULTS') {\n            status = 'DONE';\n            results = res2;\n            reason = 'res1';;\n        } else {\n            status = 'DONE';\n            reason = 'done';;\n            results = res1.concat(res2);\n        }\n\n        let res = {\n            status: status,\n            results: results,\n            reason : reason,\n            lat : loc.lat(),\n            lng : loc.lng()\n        }\n        searchStatus = 'WAITING';\n        let timeout = setTimeout(() => {SearchStatus = 'READY'},3000);\n        console.log(res);\n        return res;\n\n    }\n\n    export function perseGoogleResults(results) {\n\n        let result_temp = {};\n        let parsedResults = [];\n\n        if (results === 'ZERO_RESULTS') {\n\n            return 'NO_RESULTS';\n\n        }\n\n        for (let i = 0; i < results.length; i++) {\n\n            let result = results[i];\n            result_temp = {};\n            result_temp.name = result.name;\n            result_temp.vicinity = result.vicinity;\n            result_temp.rating = result.rating;\n            result_temp.lat = result.geometry.location.lat();\n            result_temp.lng = result.geometry.location.lng();\n            result_temp.type = 1;\n            result_temp.rat = result.user_ratings_total;\n            result_temp.google = 'we_are_still_working_on_it.sry';\n            result_temp.photo = result.photos[0].getUrl();\n            \n            /*axios.get(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${result.place_id}&key=AIzaSyC9qsxaC4dHG0ibEr9NMKC9Ddro_jdnMk8`, {\n                adapter: jsonp\n            }).then((response) => {\n\n                console.log(response);\n                result_temp.google = response.url;\n\n            });*/\n\n            //cors error occurs\n\n            parsedResults.push(result_temp);\n        }\n\n        return parsedResults;\n\n    }\n\n\n    export function perseHotPepperResults(res) {\n\n        let result_temp = {};\n        let parsedResults = [];\n        let results = res.data.results.shop;\n\n        if (res.data.results.shop.length <= 0) {\n\n            return 'NO_RESULTS';\n\n        }\n\n        for (let i = 0; i < results.length; i++) {\n\n            let result = results[i];\n            result_temp = {};\n            result_temp.name = result.name;\n            result_temp.vicinity = result.address;\n            result_temp.rating = 5;\n            result_temp.lat = result.lat;\n            result_temp.lng = result.lng;\n            result_temp.type = 2;\n            result_temp.photo = result.photo.mobile.l;\n            result_temp.hotpepper = `hotpepper.jp/str${result.id}`;\n            parsedResults.push(result_temp);\n\n        }\n\n        return parsedResults;\n\n    }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { getServiceObject, getUserLocation, getCenter } from './map';\nimport AppSlice, { appSlice } from '../../redux/appSlice';\nimport mapSlice from '../../redux/mapSlice';\nimport wheelSlice from '../../redux/wheelSlice';\nimport { searchSlice } from '../../redux/searchSlice';\nimport { combineResults, doGoogleMapSearchPromise, perseGoogleResults, perseHotPepperResults } from '../logics/map';\nimport axios from 'axios';\nimport jsonp from 'axios-jsonp';\nexport const trySearch = (keyword, useGoogle, useHotPepper) => {\n  let responseHotPepper, responseGoogle, promiseGoogle, promiseHotPepper;\n  let req = {\n    keyword: keyword,\n    radius: 500,\n    userLoc: getCenter(),\n    useGoogle: true,\n    useHotPepper: true,\n    useGurunabi: true,\n    isDone: false\n  };\n  if (!useGoogle && !useHotPepper) return;\n\n  if (useHotPepper) {\n    promiseHotPepper = axios.get(createHotPepperRequest(req), {\n      adapter: jsonp\n    }).then(response => {\n      responseHotPepper = perseHotPepperResults(response);\n    });\n  }\n\n  if (useGoogle) {\n    promiseGoogle = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then(response => {\n      responseGoogle = perseGoogleResults(response);\n    }).catch(status => {\n      responseGoogle = perseGoogleResults(status);\n    });\n  }\n\n  Promise.all([promiseGoogle, promiseHotPepper]).then(message => {\n    let noReponseOnGoogle, noReponseOnHP;\n    if (responseGoogle == 'NO_RESULTS' || respon || !useGoogle) noReponseOnGoogle = true;\n    if (responseHotPepper == 'NO_RESULTS' || !useHotPepper) noReponseOnHP = true;\n    if (noReponseOnGoogle && noReponseOnHP) return [];\n    return combineResults(responseGoogle, responseHotPepper);\n    /*if (responseGoogle == 'NO_RESULTS' || responseGoogle == undefined || promise1 == undefined) {\n        if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n             //dispatch(mapSlice.actions.setSearchResults([]));\n            //dispatch(mapSlice.actions.setSearchStatus('NO_RESULTS'));\n            return [];\n        } else {\n              //dispatch(mapSlice.actions.setSearchResults(responseHotPepper));\n             //dispatch(mapSlice.actions.setSearchStatus('DO３２NE'));\n            return responseHotPepper;\n        }\n     } else {\n        if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n              //dispatch(mapSlice.actions.setSearchResults(responseGoogle));\n             //dispatch(mapSlice.actions.setSearchStatus('DO１１１NE'));\n            return responseGoogle;\n        } else {\n              r\n             //dispatch(mapSlice.actions.setSearchResults(combinedResults));\n             //dispatch(mapSlice.actions.setSearchStatus('DsONE'));\n        }\n      }*/\n  });\n};\nexport function createGoogleRequest(req) {\n  let request = {\n    location: req.userLoc,\n    radius: req.radius,\n    keyword: req.keyword,\n    type: 'restaurant' //only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n  };\n  return request;\n}\nexport function createHotPepperRequest(req) {\n  let apiKeyHotPepper = '1ff50644037f0f38';\n  let lat = req.userLoc.lat();\n  let lng = req.userLoc.lng();\n  let keyword = req.keyword;\n  const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n  return apiURL;\n}","map":{"version":3,"names":["getServiceObject","getUserLocation","getCenter","AppSlice","appSlice","mapSlice","wheelSlice","searchSlice","combineResults","doGoogleMapSearchPromise","perseGoogleResults","perseHotPepperResults","axios","jsonp","trySearch","keyword","useGoogle","useHotPepper","responseHotPepper","responseGoogle","promiseGoogle","promiseHotPepper","req","radius","userLoc","useGurunabi","isDone","get","createHotPepperRequest","adapter","then","response","createGoogleRequest","catch","status","Promise","all","message","noReponseOnGoogle","noReponseOnHP","respon","request","location","type","apiKeyHotPepper","lat","lng","apiURL"],"sources":["/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/logics/search.js"],"sourcesContent":["\nimport { getServiceObject, getUserLocation, getCenter } from './map';\nimport AppSlice, { appSlice } from '../../redux/appSlice';\nimport mapSlice from '../../redux/mapSlice';\nimport wheelSlice from '../../redux/wheelSlice';\nimport { searchSlice } from '../../redux/searchSlice';\nimport { combineResults, doGoogleMapSearchPromise, perseGoogleResults, perseHotPepperResults } from '../logics/map';\n\nimport axios from 'axios'\nimport jsonp from 'axios-jsonp'\n\nexport const trySearch = (keyword, useGoogle, useHotPepper) => {\n\n    let responseHotPepper, responseGoogle, promiseGoogle, promiseHotPepper;\n\n    let req = {\n        keyword: keyword,\n        radius: 500,\n        userLoc: getCenter(),\n        useGoogle: true,\n        useHotPepper: true,\n        useGurunabi: true,\n        isDone: false,\n    };\n\n    if (!useGoogle && !useHotPepper)\n        return;\n\n    if (useHotPepper) {\n\n        promiseHotPepper = axios.get(createHotPepperRequest(req), {\n            adapter: jsonp\n        }).then((response) => {\n\n            responseHotPepper = perseHotPepperResults(response);\n\n        });\n    }\n\n    if (useGoogle) {\n\n        promiseGoogle = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then((response) => {\n\n            responseGoogle = perseGoogleResults(response);\n\n        }).catch((status) => {\n            responseGoogle = perseGoogleResults(status);\n\n        })\n    }\n\n\n    Promise.all([promiseGoogle, promiseHotPepper]).then((message) => {\n      \n        let noReponseOnGoogle, noReponseOnHP;\n\n        if (responseGoogle == 'NO_RESULTS' || respon || !useGoogle)\n            noReponseOnGoogle = true;\n\n        if (responseHotPepper == 'NO_RESULTS' || !useHotPepper)\n            noReponseOnHP = true;\n\n        if(noReponseOnGoogle && noReponseOnHP)\n            return []; \n\n        return combineResults(responseGoogle, responseHotPepper);\n        \n        /*if (responseGoogle == 'NO_RESULTS' || responseGoogle == undefined || promise1 == undefined) {\n            if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n\n                //dispatch(mapSlice.actions.setSearchResults([]));\n                //dispatch(mapSlice.actions.setSearchStatus('NO_RESULTS'));\n                return [];\n            } else {\n\n\n                //dispatch(mapSlice.actions.setSearchResults(responseHotPepper));\n\n                //dispatch(mapSlice.actions.setSearchStatus('DO３２NE'));\n                return responseHotPepper;\n            }\n\n        } else {\n            if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n\n\n                //dispatch(mapSlice.actions.setSearchResults(responseGoogle));\n\n                //dispatch(mapSlice.actions.setSearchStatus('DO１１１NE'));\n                return responseGoogle;\n            } else {\n\n\n                r\n\n                //dispatch(mapSlice.actions.setSearchResults(combinedResults));\n\n                //dispatch(mapSlice.actions.setSearchStatus('DsONE'));\n            }\n\n\n        }*/\n\n\n\n\n    })\n};\n\n\nexport function createGoogleRequest(req) {\n\n    let request = {\n\n        location: req.userLoc,\n        radius: req.radius,\n        keyword: req.keyword,\n        type: 'restaurant',//only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n    };\n\n    return request;\n}\n\nexport function createHotPepperRequest(req) {\n\n    let apiKeyHotPepper = '1ff50644037f0f38';\n    let lat = req.userLoc.lat();\n    let lng = req.userLoc.lng();\n    let keyword = req.keyword;\n    const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n\n    return apiURL;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
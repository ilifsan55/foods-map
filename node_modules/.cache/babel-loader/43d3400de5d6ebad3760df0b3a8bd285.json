{"ast":null,"code":"let map, service;\nlet defaultUserLoc = {\n  lat: 35.41221,\n  lng: 139.4130\n};\nexport function initMap(element, userLoc) {\n  console.log(\"Map Initialized\"); //create an actual gmap \n\n  let map = new window.google.maps.Map(element, {\n    center: userLoc,\n    zoom: 15\n  }); //draw user and user radius\n\n  let userpos = new window.google.maps.Circle({\n    center: userLoc,\n    fillColor: '#0000ff',\n    fillOpacity: 0.45,\n    map: map,\n    radius: 20,\n    strokeColor: '#0000ff',\n    strokeOpacity: 1,\n    strokeWeight: 1\n  });\n  return map;\n}\nexport function initService(map) {\n  let service = new window.google.maps.places.PlacesService(map);\n  return service;\n}\nexport function createMapInstance() {\n  map = initMap(document.getElementById('map'), defaultUserLoc);\n  service = initService(map);\n}\nexport function doGoogleMapSearchPromise(request, service) {\n  return new Promise((resolve, reject) => {\n    service.nearbySearch(request, (results, status) => {\n      if (status === 'OK') {\n        resolve(results);\n      } else {\n        reject(status);\n      }\n    });\n  });\n}\nexport function doHotPepperSearchPromise(request) {}\nexport function createGoogleRequest(req) {\n  //a request object for the initial search.\n  let request = {\n    location: req.userLoc,\n    radius: req.radius,\n    keyword: req.keyword,\n    type: 'restaurant' //only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n  };\n  return request;\n}\nexport function createHotPepperRequest(req) {\n  let apiKeyHotPepper = '1ff50644037f0f38';\n  let lat = req.userLoc.lat();\n  let lng = req.userLoc.lng();\n  console.log(lat);\n  let keyword = req.keyword;\n  const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n  return apiURL;\n}\nexport function createMarker(lat, lng, map) {\n  let marker = new window.google.maps.Marker({\n    map: map,\n    position: {\n      lat: lat,\n      lng: lng\n    }\n  });\n}\nexport function createCircle(lat, lng, map, radius) {\n  let circle = new window.google.maps.Circle({\n    center: {\n      lat: lat,\n      lng: lng\n    },\n    fillColor: '#0000ff',\n    fillOpacity: 0.45,\n    map: map,\n    radius: radius,\n    strokeColor: '#0000ff',\n    strokeOpacity: 1,\n    strokeWeight: 1\n  });\n  return circle;\n}\nexport function perseGoogleResults(results) {\n  let result_temp = {};\n  console.log(results);\n  let parsedResults = [];\n\n  if (results == 'ZERO_RESULTS') {\n    return 'NO_RESULTS';\n  }\n\n  for (let i = 0; i < results.length; i++) {\n    let result = results[i];\n    result_temp = {};\n    result_temp.name = result.name;\n    result_temp.vicinity = result.vicinity;\n    result_temp.rating = result.rating;\n    result_temp.lat = result.geometry.location.lat();\n    result_temp.lng = result.geometry.location.lng();\n    result_temp.type = 1;\n    result_temp.rat = result.user_ratings_total;\n    result_temp.google = result.url; // result_temp.photo = result.photos[0].getURL;\n\n    parsedResults.push(result_temp);\n  }\n\n  return parsedResults;\n}\nexport function perseHotPepperResults(res) {\n  let result_temp = {};\n  let parsedResults = [];\n  let results = res.data.results.shop;\n\n  if (res.data.results.shop.length <= 0) {\n    return 'NO_RESULTS';\n  }\n\n  for (let i = 0; i < results.length; i++) {\n    let result = results[i];\n    result_temp = {};\n    result_temp.name = result.name;\n    result_temp.vicinity = result.address;\n    result_temp.rating = 5;\n    result_temp.lat = result.lat;\n    result_temp.lng = result.lng;\n    result_temp.type = 2;\n    result_temp.photo = result.photo.mobile.l;\n    result_temp.hotpepper = `hotpepper.jp/str${result.id}`;\n    parsedResults.push(result_temp);\n  }\n\n  return parsedResults;\n}\nexport function combineResults(res1, res2) {\n  if (res1[0].name == 'NO_RESULTS' && res2[0].name == 'NO_RESULTS') {\n    return 'NO_RESULTS';\n  } else if (res2[0].name == '_NO_RESULTS') {\n    return res1;\n  } else if (res2[0].name == '_NO_RESULTS') {\n    return res1;\n  }\n\n  let res3 = res1.concat(res2);\n  return res3;\n}\n\nfunction getGooglePhotoPromise(ref) {\n  let url = `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${ref}&key=YOUR_API_KEY`;\n}\n\nconst getUserLocationPromise = new Promise((resolve, reject) => {\n  navigator.geolocation.getCurrentPosition(resolve, reject);\n});","map":{"version":3,"names":["map","service","defaultUserLoc","lat","lng","initMap","element","userLoc","console","log","window","google","maps","Map","center","zoom","userpos","Circle","fillColor","fillOpacity","radius","strokeColor","strokeOpacity","strokeWeight","initService","places","PlacesService","createMapInstance","document","getElementById","doGoogleMapSearchPromise","request","Promise","resolve","reject","nearbySearch","results","status","doHotPepperSearchPromise","createGoogleRequest","req","location","keyword","type","createHotPepperRequest","apiKeyHotPepper","apiURL","createMarker","marker","Marker","position","createCircle","circle","perseGoogleResults","result_temp","parsedResults","i","length","result","name","vicinity","rating","geometry","rat","user_ratings_total","url","push","perseHotPepperResults","res","data","shop","address","photo","mobile","l","hotpepper","id","combineResults","res1","res2","res3","concat","getGooglePhotoPromise","ref","getUserLocationPromise","navigator","geolocation","getCurrentPosition"],"sources":["/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/logics/map.js"],"sourcesContent":["let map,service;\n\nlet defaultUserLoc = {\n    lat: 35.41221,\n    lng: 139.4130\n};\n\nexport function initMap(element, userLoc) {\n    console.log(\"Map Initialized\");\n    //create an actual gmap \n    let map = new window.google.maps.Map(element, {\n        center: userLoc,\n        zoom: 15\n    });\n    //draw user and user radius\n    let userpos = new window.google.maps.Circle({\n        center: userLoc,\n        fillColor: '#0000ff',\n        fillOpacity: 0.45,\n        map: map,\n        radius: 20,\n        strokeColor: '#0000ff',\n        strokeOpacity: 1,\n        strokeWeight: 1\n    });\n\n    return map;\n\n}\n\nexport function initService(map) {\n\n    let service = new window.google.maps.places.PlacesService(map);\n    return service;\n}\n\nexport function createMapInstance(){\n\n    map = initMap(document.getElementById('map'), defaultUserLoc);\n    service = initService(map);\n}\n\nexport function doGoogleMapSearchPromise(request, service) {\n\n    return new Promise((resolve, reject) => {\n        service.nearbySearch(request, (results, status) => {\n            if (status === 'OK') {\n                resolve(results);\n            } else {\n                reject(status);\n            }\n        });\n    });\n\n}\n\nexport function doHotPepperSearchPromise(request) {\n\n\n}\n\n\nexport function createGoogleRequest(req) {\n\n\n    //a request object for the initial search.\n    let request = {\n        location: req.userLoc,\n        radius: req.radius,\n        keyword: req.keyword,\n        type: 'restaurant',//only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n    };\n\n    return request;\n}\n\nexport function createHotPepperRequest(req) {\n\n    let apiKeyHotPepper = '1ff50644037f0f38';\n    let lat = req.userLoc.lat();\n    let lng = req.userLoc.lng();\n    console.log(lat);\n    let keyword = req.keyword;\n\n    const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n\n    return apiURL;\n}\n\nexport function createMarker(lat, lng, map) {\n\n    let marker = new window.google.maps.Marker({\n        map: map,\n        position: { lat: lat, lng: lng },\n        \n    });\n\n}\n\nexport function createCircle(lat, lng, map , radius) {\n\n    let circle = new window.google.maps.Circle({\n        center: { lat: lat, lng: lng },\n        fillColor: '#0000ff',\n        fillOpacity: 0.45,\n        map: map,\n        radius: radius,\n        strokeColor: '#0000ff',\n        strokeOpacity: 1,\n        strokeWeight: 1\n    });\n    return circle;\n}\n\nexport function perseGoogleResults(results) {\n\n    let result_temp = {};\n    console.log(results)\n    let parsedResults = [];\n    if (results == 'ZERO_RESULTS') {\n\n\n        return 'NO_RESULTS';\n\n    }\n    for (let i = 0; i < results.length; i++) {\n\n        let result = results[i];\n        result_temp = {};\n\n        result_temp.name = result.name;\n        result_temp.vicinity = result.vicinity;\n        result_temp.rating = result.rating;\n        result_temp.lat = result.geometry.location.lat();\n        result_temp.lng = result.geometry.location.lng();\n        result_temp.type = 1;\n        result_temp.rat = result.user_ratings_total;\n        result_temp.google = result.url;\n\n       // result_temp.photo = result.photos[0].getURL;\n\n\n\n        parsedResults.push(result_temp);\n    }\n\n    \n    return parsedResults;\n\n\n}\n\n\nexport function perseHotPepperResults(res) {\n\n\n\n    let result_temp = {};\n    let parsedResults = [];\n    let results = res.data.results.shop;\n    if (res.data.results.shop.length <= 0) {\n\n        return 'NO_RESULTS';\n\n    }\n    for (let i = 0; i < results.length; i++) {\n\n        let result = results[i];\n        result_temp = {};\n\n        result_temp.name = result.name;\n        result_temp.vicinity = result.address;\n        result_temp.rating = 5;\n        result_temp.lat = result.lat;\n        result_temp.lng = result.lng;\n        result_temp.type = 2;\n        result_temp.photo = result.photo.mobile.l;\n        result_temp.hotpepper = `hotpepper.jp/str${result.id}`;\n\n\n        parsedResults.push(result_temp);\n        \n    }\n\n    return parsedResults;\n\n\n}\n\nexport function combineResults(res1, res2) {\n\n    if (res1[0].name == 'NO_RESULTS' && res2[0].name == 'NO_RESULTS') {\n        return 'NO_RESULTS';\n    } else if (res2[0].name == '_NO_RESULTS') {\n        return res1;\n    } else if (res2[0].name == '_NO_RESULTS') {\n        return res1;\n    }\n\n    let res3 = res1.concat(res2);\n\n    return res3;\n\n}\n\nfunction getGooglePhotoPromise(ref) {\n    let url = `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${ref}&key=YOUR_API_KEY`;\n\n}\n\nconst getUserLocationPromise = new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject)\n})"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { getServiceObject, getUserLocation, getCenter } from './map';\nimport AppSlice, { appSlice } from '../../redux/appSlice';\nimport mapSlice from '../../redux/mapSlice';\nimport wheelSlice from '../../redux/wheelSlice';\nimport { searchSlice } from '../../redux/searchSlice';\nimport { doGoogleMapSearchPromise } from '../logics/map';\nimport axios from 'axios';\nimport jsonp from 'axios-jsonp';\nexport const trySearch = (keyword, useGoogle, useHotPepper) => {\n  let responseHotPepper, responseGoogle, promiseGoogle, promiseHotPepper;\n  let req = {\n    keyword: keyword,\n    radius: 500,\n    userLoc: getCenter(),\n    useGoogle: true,\n    useHotPepper: true,\n    useGurunabi: true,\n    isDone: false\n  };\n  if (!useGoogle && !useHotPepper) return;\n\n  if (useHotPepper) {\n    promiseHotPepper = axios.get(createHotPepperRequest(req), {\n      adapter: jsonp\n    }).then(response => {\n      responseHotPepper = perseHotPepperResults(response);\n    });\n  }\n\n  if (useGoogle) {\n    promiseGoogle = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then(response => {\n      responseGoogle = perseGoogleResults(response);\n    }).catch(status => {\n      responseGoogle = perseGoogleResults(status);\n    });\n  }\n\n  Promise.all([promiseGoogle, promiseHotPepper]).then(message => {\n    if (!useGoogle) responseGoogle == 'NO_RESULTS';\n    if (!useHotPepper) responseHotPepper == 'NO_RESULTS';\n    return combineResults(responseGoogle, responseHotPepper); //dispatch(mapSlice.actions.setSearchResults(responseGoogle));\n\n    /*if (responseGoogle == 'NO_RESULTS' || responseGoogle == undefined || promise1 == undefined) {\n        if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n             //dispatch(mapSlice.actions.setSearchResults([]));\n            //dispatch(mapSlice.actions.setSearchStatus('NO_RESULTS'));\n            return [];\n        } else {\n              //dispatch(mapSlice.actions.setSearchResults(responseHotPepper));\n             //dispatch(mapSlice.actions.setSearchStatus('DO３２NE'));\n            return responseHotPepper;\n        }\n     } else {\n        if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n              //dispatch(mapSlice.actions.setSearchResults(responseGoogle));\n             //dispatch(mapSlice.actions.setSearchStatus('DO１１１NE'));\n            return responseGoogle;\n        } else {\n              r\n             //dispatch(mapSlice.actions.setSearchResults(combinedResults));\n             //dispatch(mapSlice.actions.setSearchStatus('DsONE'));\n        }\n      }*/\n  });\n};\nexport function createGoogleRequest(req) {\n  let request = {\n    location: req.userLoc,\n    radius: req.radius,\n    keyword: req.keyword,\n    type: 'restaurant' //only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n  };\n  return request;\n}\nexport function createHotPepperRequest(req) {\n  let apiKeyHotPepper = '1ff50644037f0f38';\n  let lat = req.userLoc.lat();\n  let lng = req.userLoc.lng();\n  let keyword = req.keyword;\n  const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n  return apiURL;\n}\nexport function combineResults(res1, res2) {\n  let results, status;\n\n  if (res1 == 'NO_RESULTS' && res2 == 'NO_RESULTS') {\n    status = 'NO_RESULTS';\n    results = [];\n  } else if (res2 == '_NO_RESULTS') {\n    status = 'DONE';\n    results = res1;\n  } else if (res1 == '_NO_RESULTS') {\n    status = 'DONE';\n    results = res2;\n  } else {\n    status = 'DONE';\n    results = res1.concat(res2);\n  }\n\n  let res = {\n    status: status,\n    results: results\n  };\n  return res;\n}\nexport function perseGoogleResults(results) {\n  let result_temp = {};\n  let parsedResults = [];\n\n  if (results == 'ZERO_RESULTS') {\n    return 'NO_RESULTS';\n  }\n\n  for (let i = 0; i < results.length; i++) {\n    let result = results[i];\n    result_temp = {};\n    result_temp.name = result.name;\n    result_temp.vicinity = result.vicinity;\n    result_temp.rating = result.rating;\n    result_temp.lat = result.geometry.location.lat();\n    result_temp.lng = result.geometry.location.lng();\n    result_temp.type = 1;\n    result_temp.rat = result.user_ratings_total;\n    result_temp.google = result.url; // result_temp.photo = result.photos[0].getURL;\n\n    parsedResults.push(result_temp);\n  }\n\n  return parsedResults;\n}\nexport function perseHotPepperResults(res) {\n  let result_temp = {};\n  let parsedResults = [];\n  let results = res.data.results.shop;\n\n  if (res.data.results.shop.length <= 0) {\n    return 'NO_RESULTS';\n  }\n\n  for (let i = 0; i < results.length; i++) {\n    let result = results[i];\n    result_temp = {};\n    result_temp.name = result.name;\n    result_temp.vicinity = result.address;\n    result_temp.rating = 5;\n    result_temp.lat = result.lat;\n    result_temp.lng = result.lng;\n    result_temp.type = 2;\n    result_temp.photo = result.photo.mobile.l;\n    result_temp.hotpepper = `hotpepper.jp/str${result.id}`;\n    parsedResults.push(result_temp);\n  }\n\n  return parsedResults;\n}","map":{"version":3,"names":["getServiceObject","getUserLocation","getCenter","AppSlice","appSlice","mapSlice","wheelSlice","searchSlice","doGoogleMapSearchPromise","axios","jsonp","trySearch","keyword","useGoogle","useHotPepper","responseHotPepper","responseGoogle","promiseGoogle","promiseHotPepper","req","radius","userLoc","useGurunabi","isDone","get","createHotPepperRequest","adapter","then","response","perseHotPepperResults","createGoogleRequest","perseGoogleResults","catch","status","Promise","all","message","combineResults","request","location","type","apiKeyHotPepper","lat","lng","apiURL","res1","res2","results","concat","res","result_temp","parsedResults","i","length","result","name","vicinity","rating","geometry","rat","user_ratings_total","google","url","push","data","shop","address","photo","mobile","l","hotpepper","id"],"sources":["/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/logics/search.js"],"sourcesContent":["\nimport { getServiceObject, getUserLocation, getCenter } from './map';\nimport AppSlice, { appSlice } from '../../redux/appSlice';\nimport mapSlice from '../../redux/mapSlice';\nimport wheelSlice from '../../redux/wheelSlice';\nimport { searchSlice } from '../../redux/searchSlice';\nimport { doGoogleMapSearchPromise} from '../logics/map';\n\nimport axios from 'axios'\nimport jsonp from 'axios-jsonp'\n\nexport const trySearch = (keyword, useGoogle, useHotPepper) => {\n\n    let responseHotPepper, responseGoogle, promiseGoogle, promiseHotPepper;\n\n    let req = {\n        keyword: keyword,\n        radius: 500,\n        userLoc: getCenter(),\n        useGoogle: true,\n        useHotPepper: true,\n        useGurunabi: true,\n        isDone: false,\n    };\n\n    if (!useGoogle && !useHotPepper)\n        return;\n\n    if (useHotPepper) {\n\n        promiseHotPepper = axios.get(createHotPepperRequest(req), {\n            adapter: jsonp\n        }).then((response) => {\n\n            responseHotPepper = perseHotPepperResults(response);\n\n        });\n    }\n\n    if (useGoogle) {\n\n        promiseGoogle = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then((response) => {\n\n            responseGoogle = perseGoogleResults(response);\n\n        }).catch((status) => {\n            responseGoogle = perseGoogleResults(status);\n\n        })\n    }\n\n\n    Promise.all([promiseGoogle, promiseHotPepper]).then((message) => {\n\n        if (!useGoogle)\n            responseGoogle == 'NO_RESULTS';\n\n        if (!useHotPepper)\n            responseHotPepper == 'NO_RESULTS';\n\n        return combineResults(responseGoogle, responseHotPepper);\n         //dispatch(mapSlice.actions.setSearchResults(responseGoogle));\n\n        /*if (responseGoogle == 'NO_RESULTS' || responseGoogle == undefined || promise1 == undefined) {\n            if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n\n                //dispatch(mapSlice.actions.setSearchResults([]));\n                //dispatch(mapSlice.actions.setSearchStatus('NO_RESULTS'));\n                return [];\n            } else {\n\n\n                //dispatch(mapSlice.actions.setSearchResults(responseHotPepper));\n\n                //dispatch(mapSlice.actions.setSearchStatus('DO３２NE'));\n                return responseHotPepper;\n            }\n\n        } else {\n            if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n\n\n                //dispatch(mapSlice.actions.setSearchResults(responseGoogle));\n\n                //dispatch(mapSlice.actions.setSearchStatus('DO１１１NE'));\n                return responseGoogle;\n            } else {\n\n\n                r\n\n                //dispatch(mapSlice.actions.setSearchResults(combinedResults));\n\n                //dispatch(mapSlice.actions.setSearchStatus('DsONE'));\n            }\n\n\n        }*/\n\n\n\n\n    })\n};\n\n\nexport function createGoogleRequest(req) {\n\n    let request = {\n\n        location: req.userLoc,\n        radius: req.radius,\n        keyword: req.keyword,\n        type: 'restaurant',//only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n    };\n\n    return request;\n}\n\nexport function createHotPepperRequest(req) {\n\n    let apiKeyHotPepper = '1ff50644037f0f38';\n    let lat = req.userLoc.lat();\n    let lng = req.userLoc.lng();\n    let keyword = req.keyword;\n    const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n\n    return apiURL;\n}\n\nexport function combineResults(res1, res2) {\n\n    let results,status;\n\n    if (res1 == 'NO_RESULTS' && res2 == 'NO_RESULTS') {\n        status = 'NO_RESULTS';\n        results = [];\n    } else if (res2 == '_NO_RESULTS') {\n        status = 'DONE';\n        results = res1;\n    } else if (res1 == '_NO_RESULTS') {\n        status = 'DONE';\n        results = res2;\n    } else { \n        status = 'DONE';\n        results = res1.concat(res2);\n    }\n\n\n    let res = {\n        status : status,\n        results : results\n    }\n\n    return res;\n\n}\n\nexport function perseGoogleResults(results) {\n\n    let result_temp = {};\n    let parsedResults = [];\n    if (results == 'ZERO_RESULTS') {\n\n        return 'NO_RESULTS';\n\n    }\n    for (let i = 0; i < results.length; i++) {\n\n        let result = results[i];\n        result_temp = {};\n\n        result_temp.name = result.name;\n        result_temp.vicinity = result.vicinity;\n        result_temp.rating = result.rating;\n        result_temp.lat = result.geometry.location.lat();\n        result_temp.lng = result.geometry.location.lng();\n        result_temp.type = 1;\n        result_temp.rat = result.user_ratings_total;\n        result_temp.google = result.url;\n\n        // result_temp.photo = result.photos[0].getURL;\n\n\n\n        parsedResults.push(result_temp);\n    }\n\n\n    return parsedResults;\n\n\n}\n\n\nexport function perseHotPepperResults(res) {\n\n\n\n    let result_temp = {};\n    let parsedResults = [];\n    let results = res.data.results.shop;\n    if (res.data.results.shop.length <= 0) {\n\n        return 'NO_RESULTS';\n\n    }\n\n    for (let i = 0; i < results.length; i++) {\n\n        let result = results[i];\n        result_temp = {};\n\n        result_temp.name = result.name;\n        result_temp.vicinity = result.address;\n        result_temp.rating = 5;\n        result_temp.lat = result.lat;\n        result_temp.lng = result.lng;\n        result_temp.type = 2;\n        result_temp.photo = result.photo.mobile.l;\n        result_temp.hotpepper = `hotpepper.jp/str${result.id}`;\n\n\n        parsedResults.push(result_temp);\n\n    }\n\n    return parsedResults;\n\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
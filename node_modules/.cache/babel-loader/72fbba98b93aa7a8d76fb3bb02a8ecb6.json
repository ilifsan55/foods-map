{"ast":null,"code":"import { getServiceObject, getUserLocation, getCenter } from './map';\nimport AppSlice, { appSlice } from '../../redux/appSlice';\nimport mapSlice from '../../redux/mapSlice';\nimport wheelSlice from '../../redux/wheelSlice';\nimport { searchSlice } from '../../redux/searchSlice';\nimport { combineResults, doGoogleMapSearchPromise, perseGoogleResults, perseHotPepperResults } from '../logics/map';\nimport axios from 'axios';\nimport jsonp from 'axios-jsonp';\nexport const trySearch = (keyword, useGoogle, useHotPepper) => {\n  let responseHotPepper, responseGoogle, promise1, promise2;\n  let req = {\n    keyword: keyword,\n    radius: 500,\n    userLoc: getCenter(),\n    useGoogle: true,\n    useHotPepper: true,\n    useGurunabi: true,\n    isDone: false\n  };\n\n  if (useHotPepper) {\n    promise1 = axios.get(createHotPepperRequest(req), {\n      adapter: jsonp\n    }).then(response => {\n      responseHotPepper = perseHotPepperResults(response);\n    });\n  }\n\n  if (useGoogle) {\n    promise2 = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then(response => {\n      responseGoogle = perseGoogleResults(response);\n    }).catch(status => {\n      responseGoogle = perseGoogleResults(status);\n    });\n  }\n\n  if (promise1 == undefined && promise2 == undefined) return;\n  Promise.all([promise1, promise2]).then(message => {\n    console.log(promise1);\n    console.log(responseHotPepper);\n\n    if (responseGoogle == 'NO_RESULTS' || responseGoogle == undefined || promise1 == undefined) {\n      if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n        //dispatch(mapSlice.actions.setSearchResults([]));\n        //dispatch(mapSlice.actions.setSearchStatus('NO_RESULTS'));\n        return [];\n      } else {\n        //dispatch(mapSlice.actions.setSearchResults(responseHotPepper));\n        //dispatch(mapSlice.actions.setSearchStatus('DO３２NE'));\n        return responseHotPepper;\n      }\n    } else {\n      if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n        //dispatch(mapSlice.actions.setSearchResults(responseGoogle));\n        //dispatch(mapSlice.actions.setSearchStatus('DO１１１NE'));\n        return responseGoogle;\n      } else {\n        return combineResults(responseGoogle, responseHotPepper); //dispatch(mapSlice.actions.setSearchResults(combinedResults));\n        //dispatch(mapSlice.actions.setSearchStatus('DsONE'));\n      }\n    }\n  });\n};\nexport function createGoogleRequest(req) {\n  //a request object for the initial search.\n  let request = {\n    location: req.userLoc,\n    radius: req.radius,\n    keyword: req.keyword,\n    type: 'restaurant' //only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n  };\n  return request;\n}\nexport function createHotPepperRequest(req) {\n  let apiKeyHotPepper = '1ff50644037f0f38';\n  let lat = req.userLoc.lat();\n  let lng = req.userLoc.lng();\n  console.log(lat);\n  let keyword = req.keyword;\n  const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n  return apiURL;\n}","map":{"version":3,"names":["getServiceObject","getUserLocation","getCenter","AppSlice","appSlice","mapSlice","wheelSlice","searchSlice","combineResults","doGoogleMapSearchPromise","perseGoogleResults","perseHotPepperResults","axios","jsonp","trySearch","keyword","useGoogle","useHotPepper","responseHotPepper","responseGoogle","promise1","promise2","req","radius","userLoc","useGurunabi","isDone","get","createHotPepperRequest","adapter","then","response","createGoogleRequest","catch","status","undefined","Promise","all","message","console","log","request","location","type","apiKeyHotPepper","lat","lng","apiURL"],"sources":["/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/logics/search.js"],"sourcesContent":["\nimport { getServiceObject, getUserLocation, getCenter } from './map';\nimport AppSlice, { appSlice } from '../../redux/appSlice';\nimport mapSlice from '../../redux/mapSlice';\nimport wheelSlice from '../../redux/wheelSlice';\nimport { searchSlice } from '../../redux/searchSlice';\nimport { combineResults, doGoogleMapSearchPromise, perseGoogleResults, perseHotPepperResults} from '../logics/map';\n\nimport axios from 'axios'\nimport jsonp from 'axios-jsonp'\n\nexport const trySearch = (keyword,useGoogle,useHotPepper) => {\n\n    let responseHotPepper, responseGoogle, promise1, promise2;\n\n    let req = {\n      keyword: keyword,\n      radius: 500,\n      userLoc: getCenter(),\n      useGoogle: true,\n      useHotPepper: true,\n      useGurunabi: true,\n      isDone: false,\n    };\n\n    if (useHotPepper) {\n\n      promise1 = axios.get(createHotPepperRequest(req), {\n        adapter: jsonp\n      }).then((response) => {\n\n        responseHotPepper = perseHotPepperResults(response);\n\n      });\n    }\n    if (useGoogle) {\n\n      promise2 = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then((response) => {\n\n\n        responseGoogle = perseGoogleResults(response);\n\n\n\n      }).catch((status) => {\n        responseGoogle = perseGoogleResults(status);\n\n      })\n    }\n    if (promise1 == undefined && promise2 == undefined)\n      return;\n\n\n    Promise.all([promise1, promise2]).then((message) => {\n      console.log(promise1);\n      console.log(responseHotPepper);\n\n      if (responseGoogle == 'NO_RESULTS' || responseGoogle == undefined || promise1 == undefined) {\n        if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n\n          //dispatch(mapSlice.actions.setSearchResults([]));\n          //dispatch(mapSlice.actions.setSearchStatus('NO_RESULTS'));\n          return [];\n        } else {\n\n\n          //dispatch(mapSlice.actions.setSearchResults(responseHotPepper));\n\n          //dispatch(mapSlice.actions.setSearchStatus('DO３２NE'));\n          return responseHotPepper;\n        }\n\n      } else {\n        if (responseHotPepper == 'NO_RESULTS' || responseHotPepper == undefined || promise2 == undefined) {\n\n\n          //dispatch(mapSlice.actions.setSearchResults(responseGoogle));\n\n          //dispatch(mapSlice.actions.setSearchStatus('DO１１１NE'));\n          return responseGoogle;\n        } else {\n\n\n          return combineResults(responseGoogle, responseHotPepper);\n\n          //dispatch(mapSlice.actions.setSearchResults(combinedResults));\n\n          //dispatch(mapSlice.actions.setSearchStatus('DsONE'));\n        }\n\n\n      }\n\n\n\n\n    })};\n\n\nexport function createGoogleRequest(req) {\n\n\n    //a request object for the initial search.\n    let request = {\n        location: req.userLoc,\n        radius: req.radius,\n        keyword: req.keyword,\n        type: 'restaurant',//only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n    };\n\n    return request;\n}\n\nexport function createHotPepperRequest(req) {\n\n    let apiKeyHotPepper = '1ff50644037f0f38';\n    let lat = req.userLoc.lat();\n    let lng = req.userLoc.lng();\n    console.log(lat);\n    let keyword = req.keyword;\n\n    const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n\n    return apiURL;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
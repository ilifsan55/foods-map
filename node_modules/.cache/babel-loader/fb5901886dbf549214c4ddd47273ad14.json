{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit'; // Initial values of the state\n\nconst appInitialState = {\n  mainState: 0,\n  appState: 0,\n  wheelRotation: 1800,\n  wheelContents: [\"ラーメン\", \"カレー\", \"ハンバーガー\", \"牛丼\", \"そば\", \"ドーナツ\", \"うどん\", \"中華\"],\n  mapResults: [],\n  searchRequest: {\n    keyword: '',\n    radius: 500,\n    useGoogle: true,\n    useHotPepper: true,\n    useGurunabi: true,\n    isDone: true\n  },\n  inputValue: '',\n  screenSize: {\n    x: 0,\n    y: 0\n  },\n  wheelToggle: false\n}; // creating the slice\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: appInitialState,\n  reducers: {\n    setState: (state, action) => {\n      state.mainState = action.payload;\n    },\n    setAppState: (state, action) => {\n      state.appState = action.payload;\n    },\n    setRotation: (state, action) => {\n      state.wheelRotation = action.payload;\n    },\n    setContents: (state, action) => {\n      state.wheelContents = action.payload;\n    },\n    setResults: (state, action) => {\n      state.mapResults = action.payload;\n    },\n    trySearch: (state, action) => {\n      state.searchRequest = action.payload;\n    },\n    handleInputField: (state, action) => {\n      state.inputValue = action.payload;\n    },\n    getScreenSize: (state, action) => {\n      state.screenSize = action.payload;\n    },\n    toggleWheel: (state, action) => {\n      state.wheelToggle = action.payload;\n    }\n  }\n});\nexport default appSlice;","map":{"version":3,"names":["createSlice","appInitialState","mainState","appState","wheelRotation","wheelContents","mapResults","searchRequest","keyword","radius","useGoogle","useHotPepper","useGurunabi","isDone","inputValue","screenSize","x","y","wheelToggle","appSlice","name","initialState","reducers","setState","state","action","payload","setAppState","setRotation","setContents","setResults","trySearch","handleInputField","getScreenSize","toggleWheel"],"sources":["/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/redux/appSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// Initial values of the state\nconst appInitialState = {\n    mainState: 0,\n    appState: 0,\n    wheelRotation: 1800,\n    wheelContents: [\"ラーメン\", \"カレー\", \"ハンバーガー\", \"牛丼\", \"そば\", \"ドーナツ\", \"うどん\", \"中華\"],\n    mapResults: [],\n   \n    searchRequest: {\n        keyword:'',\n        radius:500,\n        useGoogle:true,\n        useHotPepper:true,\n        useGurunabi:true,\n        isDone:true\n    },\n    inputValue: '',\n    screenSize: {\n        x:0,\n        y:0\n    },\n    wheelToggle:false\n\n};\n\n// creating the slice\nexport const appSlice = createSlice({\n    name: 'app', \n    initialState: appInitialState,\n    reducers: {\n        setState: (state, action) => {\n            state.mainState = action.payload;\n        },\n        setAppState: (state, action) => {\n            state.appState = action.payload;\n        },\n        setRotation: (state, action) => {\n            state.wheelRotation = action.payload;\n        },\n        setContents: (state, action) => {\n            state.wheelContents = action.payload;\n        },\n        setResults: (state, action) => {\n            state.mapResults = action.payload;\n        },\n        trySearch: (state,action)=>{\n            state.searchRequest = action.payload;\n        },\n        handleInputField: (state,action) => {\n            state.inputValue = action.payload;\n        },\n        getScreenSize: (state,action) => {\n            state.screenSize = action.payload;\n        },\n        toggleWheel: (state,action) => {\n\n            state.wheelToggle = action.payload;\n        }\n    },\n});\n\nexport default appSlice;"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AACA,MAAMC,eAAe,GAAG;EACpBC,SAAS,EAAE,CADS;EAEpBC,QAAQ,EAAE,CAFU;EAGpBC,aAAa,EAAE,IAHK;EAIpBC,aAAa,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAhB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,MAAtC,EAA8C,KAA9C,EAAqD,IAArD,CAJK;EAKpBC,UAAU,EAAE,EALQ;EAOpBC,aAAa,EAAE;IACXC,OAAO,EAAC,EADG;IAEXC,MAAM,EAAC,GAFI;IAGXC,SAAS,EAAC,IAHC;IAIXC,YAAY,EAAC,IAJF;IAKXC,WAAW,EAAC,IALD;IAMXC,MAAM,EAAC;EANI,CAPK;EAepBC,UAAU,EAAE,EAfQ;EAgBpBC,UAAU,EAAE;IACRC,CAAC,EAAC,CADM;IAERC,CAAC,EAAC;EAFM,CAhBQ;EAoBpBC,WAAW,EAAC;AApBQ,CAAxB,C,CAwBA;;AACA,OAAO,MAAMC,QAAQ,GAAGnB,WAAW,CAAC;EAChCoB,IAAI,EAAE,KAD0B;EAEhCC,YAAY,EAAEpB,eAFkB;EAGhCqB,QAAQ,EAAE;IACNC,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACzBD,KAAK,CAACtB,SAAN,GAAkBuB,MAAM,CAACC,OAAzB;IACH,CAHK;IAINC,WAAW,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;MAC5BD,KAAK,CAACrB,QAAN,GAAiBsB,MAAM,CAACC,OAAxB;IACH,CANK;IAONE,WAAW,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;MAC5BD,KAAK,CAACpB,aAAN,GAAsBqB,MAAM,CAACC,OAA7B;IACH,CATK;IAUNG,WAAW,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;MAC5BD,KAAK,CAACnB,aAAN,GAAsBoB,MAAM,CAACC,OAA7B;IACH,CAZK;IAaNI,UAAU,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;MAC3BD,KAAK,CAAClB,UAAN,GAAmBmB,MAAM,CAACC,OAA1B;IACH,CAfK;IAgBNK,SAAS,EAAE,CAACP,KAAD,EAAOC,MAAP,KAAgB;MACvBD,KAAK,CAACjB,aAAN,GAAsBkB,MAAM,CAACC,OAA7B;IACH,CAlBK;IAmBNM,gBAAgB,EAAE,CAACR,KAAD,EAAOC,MAAP,KAAkB;MAChCD,KAAK,CAACV,UAAN,GAAmBW,MAAM,CAACC,OAA1B;IACH,CArBK;IAsBNO,aAAa,EAAE,CAACT,KAAD,EAAOC,MAAP,KAAkB;MAC7BD,KAAK,CAACT,UAAN,GAAmBU,MAAM,CAACC,OAA1B;IACH,CAxBK;IAyBNQ,WAAW,EAAE,CAACV,KAAD,EAAOC,MAAP,KAAkB;MAE3BD,KAAK,CAACN,WAAN,GAAoBO,MAAM,CAACC,OAA3B;IACH;EA5BK;AAHsB,CAAD,CAA5B;AAmCP,eAAeP,QAAf"},"metadata":{},"sourceType":"module"}
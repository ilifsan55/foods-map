{"ast":null,"code":"var _jsxFileName = \"/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/views/mapView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport mapSlice from '../../redux/mapSlice';\nimport { createMapInstance } from '../logics/map';\nimport AppBar from '../templates/appBar';\nimport Gmap from '../parts/gMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet shouldMapInitialize = true;\nlet map;\nlet userLoc;\nexport default function MapView() {\n  _s();\n\n  const dispatch = useDispatch();\n  const isUserLocRequested = useSelector(state => state.mapSlice.isUserLocRequested);\n  useEffect(() => {\n    if (shouldMapInitialize) {\n      map = createMapInstance();\n      shouldMapInitialize = false;\n    }\n\n    if (isUserLocRequested) {\n      getUserLocationPromise.then(function (value) {\n        userLoc = {\n          lat: value.coords.latitude,\n          lng: value.coords.longitude\n        };\n        console.log('user loc obtained');\n        map.setZoom(15);\n        map.panTo(userLoc);\n      }).catch(value => {\n        console.log('unable to obtain the user position');\n      }).finally(() => {\n        dispatch(mapSlice.actions.requestUserLoc(false));\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Gmap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MapView, \"WHV8H0K4yWrZ3Qh2gM8xUp/kqrA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = MapView;\nexport const getUserLocationPromise = new Promise((resolve, reject) => {\n  navigator.geolocation.getCurrentPosition(resolve, reject);\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","mapSlice","createMapInstance","AppBar","Gmap","shouldMapInitialize","map","userLoc","MapView","dispatch","isUserLocRequested","state","getUserLocationPromise","then","value","lat","coords","latitude","lng","longitude","console","log","setZoom","panTo","catch","finally","actions","requestUserLoc","Promise","resolve","reject","navigator","geolocation","getCurrentPosition"],"sources":["/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/views/mapView.jsx"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport mapSlice from '../../redux/mapSlice';\nimport {createMapInstance} from '../logics/map';\nimport AppBar from '../templates/appBar';\nimport Gmap from '../parts/gMap';\n\nlet shouldMapInitialize = true;\nlet map;\nlet userLoc;\nexport default function MapView() {\n    const dispatch = useDispatch();\n    const isUserLocRequested = useSelector(state => state.mapSlice.isUserLocRequested);\n    useEffect(() => {\n        if (shouldMapInitialize) {\n            map = createMapInstance();\n            shouldMapInitialize = false;\n        }\n        if (isUserLocRequested) {\n            getUserLocationPromise.then(function (value) {\n                userLoc = {\n                    lat: value.coords.latitude,\n                    lng: value.coords.longitude\n                };\n                console.log('user loc obtained');\n                map.setZoom(15);\n                map.panTo(userLoc);\n            }).catch(value => {\n                console.log('unable to obtain the user position')\n            }).finally(() => {\n                dispatch(mapSlice.actions.requestUserLoc(false));\n            });\n        }\n    })\n    return(\n        <div id=\"page\">\n            <AppBar></AppBar>\n            <Gmap></Gmap>\n        </div>\n    );\n}\nexport const getUserLocationPromise = new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject)\n});\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAAQC,iBAAR,QAAgC,eAAhC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;;AAEA,IAAIC,mBAAmB,GAAG,IAA1B;AACA,IAAIC,GAAJ;AACA,IAAIC,OAAJ;AACA,eAAe,SAASC,OAAT,GAAmB;EAAA;;EAC9B,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;EACA,MAAMU,kBAAkB,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACV,QAAN,CAAeS,kBAAzB,CAAtC;EACAZ,SAAS,CAAC,MAAM;IACZ,IAAIO,mBAAJ,EAAyB;MACrBC,GAAG,GAAGJ,iBAAiB,EAAvB;MACAG,mBAAmB,GAAG,KAAtB;IACH;;IACD,IAAIK,kBAAJ,EAAwB;MACpBE,sBAAsB,CAACC,IAAvB,CAA4B,UAAUC,KAAV,EAAiB;QACzCP,OAAO,GAAG;UACNQ,GAAG,EAAED,KAAK,CAACE,MAAN,CAAaC,QADZ;UAENC,GAAG,EAAEJ,KAAK,CAACE,MAAN,CAAaG;QAFZ,CAAV;QAIAC,OAAO,CAACC,GAAR,CAAY,mBAAZ;QACAf,GAAG,CAACgB,OAAJ,CAAY,EAAZ;QACAhB,GAAG,CAACiB,KAAJ,CAAUhB,OAAV;MACH,CARD,EAQGiB,KARH,CAQSV,KAAK,IAAI;QACdM,OAAO,CAACC,GAAR,CAAY,oCAAZ;MACH,CAVD,EAUGI,OAVH,CAUW,MAAM;QACbhB,QAAQ,CAACR,QAAQ,CAACyB,OAAT,CAAiBC,cAAjB,CAAgC,KAAhC,CAAD,CAAR;MACH,CAZD;IAaH;EACJ,CApBQ,CAAT;EAqBA,oBACI;IAAK,EAAE,EAAC,MAAR;IAAA,wBACI,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI,QAAC,IAAD;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAMH;;GA9BuBnB,O;UACHR,W,EACUD,W;;;KAFPS,O;AA+BxB,OAAO,MAAMI,sBAAsB,GAAG,IAAIgB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EACnEC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCJ,OAAzC,EAAkDC,MAAlD;AACH,CAFqC,CAA/B"},"metadata":{},"sourceType":"module"}
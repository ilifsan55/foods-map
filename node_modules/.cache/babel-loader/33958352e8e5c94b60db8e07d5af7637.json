{"ast":null,"code":"var _jsxFileName = \"/Users/kokiyamamoto/Desktop/projects/react-test/react-app/src/googlemapapi.js\",\n    _s = $RefreshSig$();\n\nimport './base.css';\nimport React, { useState, useEffect } from 'react';\nimport { setState, setRotation } from './redux/appSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport GoogleMapReact from 'google-map-react';\nimport { Loader } from \"@googlemaps/js-api-loader\";\nimport { Wrapper } from \"@googlemaps/react-wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst apikey = \"AIzaSyC9qsxaC4dHG0ibEr9NMKC9Ddro_jdnMk8\";\n\nfunction aa() {\n  _s();\n\n  const [googleMapsApiLoaded, setGoogleMapsApiLoaded] = useState(false);\n  const initGoogleMapsApi = useCallback(async () => {\n    const loader = new Loader({\n      apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,\n      version: 'weekly',\n      region: 'JP',\n      language: 'ja',\n      libraries: ['places']\n    });\n    await loader.load();\n    setGoogleMapsApiLoaded(true);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: googleMapsApiLoaded && /*#__PURE__*/_jsxDEV(GoogleMaps, {\n      children: /*#__PURE__*/_jsxDEV(MyOverlays, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(aa, \"s9UW9Ex7ju/zRWpdVJsQaTdc1Qk=\");\n\nexport default aa;","map":{"version":3,"names":["React","useState","useEffect","setState","setRotation","useSelector","useDispatch","axios","GoogleMapReact","Loader","Wrapper","apikey","aa","googleMapsApiLoaded","setGoogleMapsApiLoaded","initGoogleMapsApi","useCallback","loader","apiKey","process","env","NEXT_PUBLIC_GOOGLE_MAPS_API_KEY","version","region","language","libraries","load"],"sources":["/Users/kokiyamamoto/Desktop/projects/react-test/react-app/src/googlemapapi.js"],"sourcesContent":["import './base.css';\nimport React, { useState, useEffect } from 'react';\nimport { setState, setRotation } from './redux/appSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport GoogleMapReact from 'google-map-react';\nimport { Loader } from \"@googlemaps/js-api-loader\";\nimport { Wrapper } from \"@googlemaps/react-wrapper\";\n\nconst apikey = \"AIzaSyC9qsxaC4dHG0ibEr9NMKC9Ddro_jdnMk8\";\n\nfunction aa (){\n\nconst [googleMapsApiLoaded, setGoogleMapsApiLoaded] = useState(false);\n   \n\nconst initGoogleMapsApi = useCallback(async () => {\n    const loader = new Loader({\n      apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,\n      version: 'weekly',\n      region: 'JP',\n      language: 'ja',\n      libraries: ['places']\n    });\n    await loader.load();\n    setGoogleMapsApiLoaded(true);\n  }, []);\n  \n  return (\n    <>\n      {googleMapsApiLoaded && (\n        <GoogleMaps>\n          <MyOverlays />\n        </GoogleMaps>\n      )}\n    </>\n  );\n      }\n  export default aa;"],"mappings":";;;AAAA,OAAO,YAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,OAAT,QAAwB,2BAAxB;;;AAEA,MAAMC,MAAM,GAAG,yCAAf;;AAEA,SAASC,EAAT,GAAc;EAAA;;EAEd,MAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDb,QAAQ,CAAC,KAAD,CAA9D;EAGA,MAAMc,iBAAiB,GAAGC,WAAW,CAAC,YAAY;IAC9C,MAAMC,MAAM,GAAG,IAAIR,MAAJ,CAAW;MACxBS,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,+BADI;MAExBC,OAAO,EAAE,QAFe;MAGxBC,MAAM,EAAE,IAHgB;MAIxBC,QAAQ,EAAE,IAJc;MAKxBC,SAAS,EAAE,CAAC,QAAD;IALa,CAAX,CAAf;IAOA,MAAMR,MAAM,CAACS,IAAP,EAAN;IACAZ,sBAAsB,CAAC,IAAD,CAAtB;EACD,CAVkC,EAUhC,EAVgC,CAArC;EAYE,oBACE;IAAA,UACGD,mBAAmB,iBAClB,QAAC,UAAD;MAAA,uBACE,QAAC,UAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EAFJ,iBADF;AASK;;GA1BED,E;;AA2BP,eAAeA,EAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/views/mapView.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport mapSlice from '../../redux/mapSlice';\nimport { getMapObject, createMapInstance } from '../logics/map';\nimport AppBar from '../templates/appBar';\nimport Gmap from '../parts/gMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet dispatch = useDispatch();\nlet shouldMapInitialize = true;\nlet map;\nlet userLoc;\nexport default function MapView() {\n  _s();\n\n  const isUserLocRequested = useSelector(state => state.mapSlice.isUserLocRequested);\n  useEffect(() => {\n    if (shouldMapInitialize) {\n      map = createMapInstance();\n      shouldMapInitialize = false;\n    }\n\n    if (isUserLocRequested) {\n      getUserLocationPromise.then(function (value) {\n        userLoc = {\n          lat: value.coords.latitude,\n          lng: value.coords.longitude\n        };\n        console.log(\"user loc obtained\");\n        map.panTo(userLoc);\n      }).catch(value => {\n        console.log(\"unable to obtain the user position\");\n      }).finally(() => {\n        dispatch(mapSlice.actions.requestUserLoc(false));\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Gmap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MapView, \"hU23xoC1WjVuksHwaZ8zmVAZD78=\", false, function () {\n  return [useSelector];\n});\n\n_c = MapView;\nexport const getUserLocationPromise = new Promise((resolve, reject) => {\n  navigator.geolocation.getCurrentPosition(resolve, reject);\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","mapSlice","getMapObject","createMapInstance","AppBar","Gmap","dispatch","shouldMapInitialize","map","userLoc","MapView","isUserLocRequested","state","getUserLocationPromise","then","value","lat","coords","latitude","lng","longitude","console","log","panTo","catch","finally","actions","requestUserLoc","Promise","resolve","reject","navigator","geolocation","getCurrentPosition"],"sources":["/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/views/mapView.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport mapSlice from '../../redux/mapSlice';\nimport {getMapObject, createMapInstance} from '../logics/map'\nimport AppBar from '../templates/appBar';\nimport Gmap from '../parts/gMap';\n\n\n\n\nlet dispatch = useDispatch();\nlet shouldMapInitialize = true;\nlet map;\nlet userLoc;\n\nexport default function MapView() {\n\n    const isUserLocRequested = useSelector(state => state.mapSlice.isUserLocRequested);\n\n    useEffect(() => {\n\n        if (shouldMapInitialize) {\n            map = createMapInstance();\n            shouldMapInitialize = false;\n        }\n\n        if (isUserLocRequested) {\n            getUserLocationPromise.then(function (value) {\n\n                userLoc = {\n                    lat: value.coords.latitude,\n                    lng: value.coords.longitude\n                };\n                console.log(\"user loc obtained\");\n                map.panTo(userLoc);\n\n\n            }).catch(value => {\n\n                console.log(\"unable to obtain the user position\")\n                \n\n            }).finally(() => {\n\n                dispatch(mapSlice.actions.requestUserLoc(false));\n\n\n            });\n        }\n    })\n\n    return(\n        <div id=\"page\">\n            <AppBar></AppBar>\n            <Gmap></Gmap>\n        </div>\n    )\n\n}\n\nexport const getUserLocationPromise = new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject)\n})\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAAQC,YAAR,EAAsBC,iBAAtB,QAA8C,eAA9C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;;AAKA,IAAIC,QAAQ,GAAGN,WAAW,EAA1B;AACA,IAAIO,mBAAmB,GAAG,IAA1B;AACA,IAAIC,GAAJ;AACA,IAAIC,OAAJ;AAEA,eAAe,SAASC,OAAT,GAAmB;EAAA;;EAE9B,MAAMC,kBAAkB,GAAGZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACX,QAAN,CAAeU,kBAAzB,CAAtC;EAEAb,SAAS,CAAC,MAAM;IAEZ,IAAIS,mBAAJ,EAAyB;MACrBC,GAAG,GAAGL,iBAAiB,EAAvB;MACAI,mBAAmB,GAAG,KAAtB;IACH;;IAED,IAAII,kBAAJ,EAAwB;MACpBE,sBAAsB,CAACC,IAAvB,CAA4B,UAAUC,KAAV,EAAiB;QAEzCN,OAAO,GAAG;UACNO,GAAG,EAAED,KAAK,CAACE,MAAN,CAAaC,QADZ;UAENC,GAAG,EAAEJ,KAAK,CAACE,MAAN,CAAaG;QAFZ,CAAV;QAIAC,OAAO,CAACC,GAAR,CAAY,mBAAZ;QACAd,GAAG,CAACe,KAAJ,CAAUd,OAAV;MAGH,CAVD,EAUGe,KAVH,CAUST,KAAK,IAAI;QAEdM,OAAO,CAACC,GAAR,CAAY,oCAAZ;MAGH,CAfD,EAeGG,OAfH,CAeW,MAAM;QAEbnB,QAAQ,CAACL,QAAQ,CAACyB,OAAT,CAAiBC,cAAjB,CAAgC,KAAhC,CAAD,CAAR;MAGH,CApBD;IAqBH;EACJ,CA9BQ,CAAT;EAgCA,oBACI;IAAK,EAAE,EAAC,MAAR;IAAA,wBACI,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI,QAAC,IAAD;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH;;GA3CuBjB,O;UAEOX,W;;;KAFPW,O;AA6CxB,OAAO,MAAMG,sBAAsB,GAAG,IAAIe,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EACnEC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCJ,OAAzC,EAAkDC,MAAlD;AACH,CAFqC,CAA/B"},"metadata":{},"sourceType":"module"}
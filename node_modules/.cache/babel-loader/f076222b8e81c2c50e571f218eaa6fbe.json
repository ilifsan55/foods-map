{"ast":null,"code":"import { getServiceObject, getUserLocation, getCenter } from './map';\nimport AppSlice, { appSlice } from '../../redux/appSlice';\nimport mapSlice from '../../redux/mapSlice';\nimport wheelSlice from '../../redux/wheelSlice';\nimport { searchSlice } from '../../redux/searchSlice';\nimport { doGoogleMapSearchPromise } from '../logics/map';\nimport axios from 'axios';\nimport jsonp from 'axios-jsonp';\nexport const trySearch = (keyword, useGoogle, useHotPepper) => {\n  return new Promise((resolve, reject) => {\n    let responseHotPepper, responseGoogle, promiseGoogle, promiseHotPepper;\n    let req = {\n      keyword: keyword,\n      radius: 500,\n      userLoc: getCenter(),\n      useGoogle: true,\n      useHotPepper: true,\n      useGurunabi: true,\n      isDone: false\n    };\n    if (!useGoogle && !useHotPepper) return;\n\n    if (useHotPepper) {\n      promiseHotPepper = axios.get(createHotPepperRequest(req), {\n        adapter: jsonp\n      }).then(response => {\n        responseHotPepper = perseHotPepperResults(response);\n      });\n    }\n\n    if (useGoogle) {\n      promiseGoogle = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then(response => {\n        responseGoogle = perseGoogleResults(response);\n      }).catch(status => {\n        responseGoogle = perseGoogleResults(status);\n      });\n    }\n\n    Promise.all([promiseGoogle, promiseHotPepper]).then(message => {\n      if (!useGoogle) responseGoogle = 'NO_RESULTS';\n      if (!useHotPepper) responseHotPepper = 'NO_RESULTS';\n      let res = combineResults(responseGoogle, responseHotPepper);\n      resolve(res);\n    });\n  });\n};\nexport function createGoogleRequest(req) {\n  let request = {\n    location: req.userLoc,\n    radius: req.radius,\n    keyword: req.keyword,\n    type: 'restaurant' //only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n  };\n  return request;\n}\nexport function createHotPepperRequest(req) {\n  let apiKeyHotPepper = '1ff50644037f0f38';\n  let lat = req.userLoc.lat();\n  let lng = req.userLoc.lng();\n  let keyword = req.keyword;\n  const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n  return apiURL;\n}\nexport function combineResults(res1, res2) {\n  let results, status;\n\n  if (res1 == 'NO_RESULTS' && res2 == 'NO_RESULTS') {\n    status = 'NO_RESULTS';\n    results = [];\n  } else if (res2 == 'NO_RESULTS') {\n    status = 'DONE';\n    results = res1;\n  } else if (res1 == 'NO_RESULTS') {\n    status = 'DONE';\n    results = res2;\n  } else {\n    status = 'DONE';\n    results = res1.concat(res2);\n  }\n\n  let res = {\n    status: status,\n    results: results\n  };\n  return res;\n}\nexport function perseGoogleResults(results) {\n  let result_temp = {};\n  let parsedResults = [];\n\n  if (results == 'ZERO_RESULTS') {\n    return 'NO_RESULTS';\n  }\n\n  for (let i = 0; i < results.length; i++) {\n    let result = results[i];\n    result_temp = {};\n    result_temp.name = result.name;\n    result_temp.vicinity = result.vicinity;\n    result_temp.rating = result.rating;\n    result_temp.lat = result.geometry.location.lat();\n    result_temp.lng = result.geometry.location.lng();\n    result_temp.type = 1;\n    result_temp.rat = result.user_ratings_total;\n    result_temp.google = result.url; // result_temp.photo = result.photos[0].getURL;\n\n    parsedResults.push(result_temp);\n  }\n\n  return parsedResults;\n}\nexport function perseHotPepperResults(res) {\n  let result_temp = {};\n  let parsedResults = [];\n  let results = res.data.results.shop;\n\n  if (res.data.results.shop.length <= 0) {\n    return 'NO_RESULTS';\n  }\n\n  for (let i = 0; i < results.length; i++) {\n    let result = results[i];\n    result_temp = {};\n    result_temp.name = result.name;\n    result_temp.vicinity = result.address;\n    result_temp.rating = 5;\n    result_temp.lat = result.lat;\n    result_temp.lng = result.lng;\n    result_temp.type = 2;\n    result_temp.photo = result.photo.mobile.l;\n    result_temp.hotpepper = `hotpepper.jp/str${result.id}`;\n    parsedResults.push(result_temp);\n  }\n\n  return parsedResults;\n}","map":{"version":3,"names":["getServiceObject","getUserLocation","getCenter","AppSlice","appSlice","mapSlice","wheelSlice","searchSlice","doGoogleMapSearchPromise","axios","jsonp","trySearch","keyword","useGoogle","useHotPepper","Promise","resolve","reject","responseHotPepper","responseGoogle","promiseGoogle","promiseHotPepper","req","radius","userLoc","useGurunabi","isDone","get","createHotPepperRequest","adapter","then","response","perseHotPepperResults","createGoogleRequest","perseGoogleResults","catch","status","all","message","res","combineResults","request","location","type","apiKeyHotPepper","lat","lng","apiURL","res1","res2","results","concat","result_temp","parsedResults","i","length","result","name","vicinity","rating","geometry","rat","user_ratings_total","google","url","push","data","shop","address","photo","mobile","l","hotpepper","id"],"sources":["/Users/kokiyamamoto/Desktop/projects/FoodsMap/src/components/logics/search.js"],"sourcesContent":["\nimport { getServiceObject, getUserLocation, getCenter } from './map';\nimport AppSlice, { appSlice } from '../../redux/appSlice';\nimport mapSlice from '../../redux/mapSlice';\nimport wheelSlice from '../../redux/wheelSlice';\nimport { searchSlice } from '../../redux/searchSlice';\nimport { doGoogleMapSearchPromise } from '../logics/map';\n\nimport axios from 'axios'\nimport jsonp from 'axios-jsonp'\n\nexport const trySearch = (keyword, useGoogle, useHotPepper) => {\n\n    return new Promise((resolve, reject) => {\n\n        let responseHotPepper, responseGoogle, promiseGoogle, promiseHotPepper;\n\n        let req = {\n            keyword: keyword,\n            radius: 500,\n            userLoc: getCenter(),\n            useGoogle: true,\n            useHotPepper: true,\n            useGurunabi: true,\n            isDone: false,\n        };\n\n        if (!useGoogle && !useHotPepper)\n            return;\n\n        if (useHotPepper) {\n\n            promiseHotPepper = axios.get(createHotPepperRequest(req), {\n                adapter: jsonp\n            }).then((response) => {\n\n                responseHotPepper = perseHotPepperResults(response);\n\n            });\n        }\n\n        if (useGoogle) {\n\n            promiseGoogle = doGoogleMapSearchPromise(createGoogleRequest(req), getServiceObject()).then((response) => {\n\n                responseGoogle = perseGoogleResults(response);\n\n            }).catch((status) => {\n                responseGoogle = perseGoogleResults(status);\n\n            })\n        }\n\n\n        Promise.all([promiseGoogle, promiseHotPepper]).then((message) => {\n\n            if (!useGoogle)\n                responseGoogle = 'NO_RESULTS';\n\n            if (!useHotPepper)\n                responseHotPepper = 'NO_RESULTS';\n\n            let res = combineResults(responseGoogle, responseHotPepper);\n            resolve(res);\n\n\n\n        })\n\n    })\n}\n\n\n    export function createGoogleRequest(req) {\n\n        let request = {\n\n            location: req.userLoc,\n            radius: req.radius,\n            keyword: req.keyword,\n            type: 'restaurant',//only one type can be specified at once!! should i consider adding the other types like cafe and etcetc?? this can be achived by simply running the another search and add up results\n\n        };\n\n        return request;\n    }\n\n    export function createHotPepperRequest(req) {\n\n        let apiKeyHotPepper = '1ff50644037f0f38';\n        let lat = req.userLoc.lat();\n        let lng = req.userLoc.lng();\n        let keyword = req.keyword;\n        const apiURL = `http://webservice.recruit.co.jp/hotpepper/gourmet/v1/?key=${apiKeyHotPepper}&lat=${lat}&lng=${lng}&count=100&range=3&keyword=${keyword}&order=4&format=jsonp`;\n\n        return apiURL;\n    }\n\n    export function combineResults(res1, res2) {\n\n        let results, status;\n\n        if (res1 == 'NO_RESULTS' && res2 == 'NO_RESULTS') {\n            status = 'NO_RESULTS';\n            results = [];\n        } else if (res2 == 'NO_RESULTS') {\n            status = 'DONE';\n            results = res1;\n        } else if (res1 == 'NO_RESULTS') {\n            status = 'DONE';\n            results = res2;\n        } else {\n            status = 'DONE';\n            results = res1.concat(res2);\n        }\n\n\n        let res = {\n            status: status,\n            results: results\n        }\n\n        return res;\n\n    }\n\n    export function perseGoogleResults(results) {\n\n        let result_temp = {};\n        let parsedResults = [];\n        if (results == 'ZERO_RESULTS') {\n\n            return 'NO_RESULTS';\n\n        }\n        for (let i = 0; i < results.length; i++) {\n\n            let result = results[i];\n            result_temp = {};\n\n            result_temp.name = result.name;\n            result_temp.vicinity = result.vicinity;\n            result_temp.rating = result.rating;\n            result_temp.lat = result.geometry.location.lat();\n            result_temp.lng = result.geometry.location.lng();\n            result_temp.type = 1;\n            result_temp.rat = result.user_ratings_total;\n            result_temp.google = result.url;\n\n            // result_temp.photo = result.photos[0].getURL;\n\n\n\n            parsedResults.push(result_temp);\n        }\n\n\n        return parsedResults;\n\n\n    }\n\n\n    export function perseHotPepperResults(res) {\n\n\n\n        let result_temp = {};\n        let parsedResults = [];\n        let results = res.data.results.shop;\n        if (res.data.results.shop.length <= 0) {\n\n            return 'NO_RESULTS';\n\n        }\n\n        for (let i = 0; i < results.length; i++) {\n\n            let result = results[i];\n            result_temp = {};\n\n            result_temp.name = result.name;\n            result_temp.vicinity = result.address;\n            result_temp.rating = 5;\n            result_temp.lat = result.lat;\n            result_temp.lng = result.lng;\n            result_temp.type = 2;\n            result_temp.photo = result.photo.mobile.l;\n            result_temp.hotpepper = `hotpepper.jp/str${result.id}`;\n\n\n            parsedResults.push(result_temp);\n\n        }\n\n        return parsedResults;\n\n\n    }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}